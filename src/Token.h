#pragma once
#include <ctype.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum
{
    None,
    VoidKeyword,
    StructKeyword,
    AsmKeyword,
    IntKeyword,
    Int32Keyword,

    UintKeyword,
    Uint32Keyword,

    FixedKeyword,

    IfKeyword,
    ElseKeyword,
    WhileKeyword,
    DoKeyword,
    ForKeyword,
    ReturnKeyword,
    ContinueKeyword,
    BreakKeyword,
    SwitchKeyword,
    CaseKeyword,
    DefaultKeyword,
    EnumKeyword,
    TypedefKeyword,

    RBrOpen,
    RBrClose,
    CBrOpen,
    CBrClose,
    ABrOpen,
    ABrClose,
    Semicolon,

    Plus,
    Minus,
    Star,
    Slash,
    Ampersand,
    BitwiseOR,
    BitwiseXOR,
    ShiftLeft,
    ShiftRight,
    Percent,
    LogicalAND,
    LogicalOR,

    UNUSED,

    Dot,
    Arrow,

    LessThan,
    LessThanEq,
    GreaterThan,
    GreaterThanEq,
    Equals,
    NotEquals,

    AssignmentAdd,
    AssignmentSub,
    AssignmentMul,
    AssignmentDiv,
    AssignmentAND,
    AssignmentOR,
    AssignmentXOR,
    AssignmentShiftLeft,
    AssignmentShiftRight,
    AssignmentMod,
    Assignment,

    BitwiseNOT,
    LogicalNOT,

    // BitwiseAND, (Ampersand)

    Increment,
    Decrement,

    Comma,
    Colon,
    QuestionMark,
    DotDotDot,

    Identifier,
    IntLiteral,
    StringLiteral,

    SizeOfKeyword,
    ConstKeyword,
    RestrictKeyword,
    GotoKeyword,
    RegisterKeyword,
    UnionKeyword,
    StaticKeyword,

    // These tokens are not generated by the lexer;
    // they just makes it easier to reuse this enum
    // as variable type.
    ArrayToken,
    FunctionPointerToken,
} TokenType;

typedef struct
{
    TokenType type;
    void* data;
} Token;

Token Token_Get(TokenType type);

Token Token_GetString(TokenType type, char* string);

Token Token_GetInt(TokenType type, int32_t* integer);

typedef struct
{
    uint16_t lineNumber;
    char* sourceFile;
} SourceLocation;

typedef struct
{
    size_t highestTokenIndex;
    SourceLocation location;
} TokenSourceGroup;

typedef struct
{
    Token* tokens;
    size_t curLength;
    size_t maxLength;

    size_t locationsCount;
    size_t maxLocationsCount;
    TokenSourceGroup* locations;

} TokenArray;

TokenArray* Token_CreateArray(size_t size);
void Token_DeleteArray(TokenArray* array);

void Token_AppendArray(Token t, TokenArray* array, uint16_t lineNumber, char* sourceFile);

SourceLocation Token_GetLocation(size_t tokenIndex);
SourceLocation Token_GetLocationP(const Token* token);

void PopNext(size_t* i, TokenType type);
void PopNextInc(size_t* i, TokenType type);
void PopCur(size_t* i, TokenType type);
void Inc(size_t* i);
void Token_SetTokenArray(const TokenArray* t);